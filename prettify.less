@import "locate://bit-docs-prettify/prettify-variables.less";

// allow user theme to override variables
@import "locate://bit-docs-site/styles/variables.less";

/**
 * @stylesheet prettify.less Prettify
 * @parent bit-docs/theme
 *
 * @description
 * Layout of code wells and syntax highlighting of code languages. 
 *
 * @body
 *
 * Syntax highlighting and colors provided by 
 * <a href="https://github.com/google/code-prettify">prettify.js</a> and
 * <a href="https://github.com/chriskempson/tomorrow-theme">Tomorrow Theme</a>.
 *
 * Code "wells" are styled based on the use of the `<pre>` and `<code>` tags
 * around your desired code example.
 *
 * Below are examples in a few of the supported languages.
 *
 * ### HTML
 *
 * ```html
 * <pre>
 *   <code>
 *     <div class="example"><!--with a comment -->
 *       <h1>example</h1>
 *       <p>this is some example code that is being styled.</p>
 *     </div>
 *   </code>
 * </pre>
 *
 * ```
 *
 * ### JavaScript
 *
 *```js
 * var foo = require('f'),
 *     bar = require('br'),
 *     writefile = f.denodify(br.writefile),
 *     path = require('path');
 * 
 * module.exports = function(littlepromise, options){
 *    return littlepromise.then(function(little){
 *      return writefile(
 *          path.join(options.dest,'little.json'),
 *          json.stringify(little) );
 *    });
 * };
 * ```
 *
 * ### JSON
 *
 *```json
 * {
 *   "sites": {
 *     "docs": {
 *       "key" : "value"
 *     }
 *   }
 * }
 * ```
 */

code {
  padding: 0 5px;
  border-radius: 5px;
  background-color: @colorCode;
}

pre, code, pre *, code * {
  font-weight: 300;
  font-style: normal;
  font-family: "courier new", courier, mono;
}

pre {
  margin: 0;
  overflow: auto;
  border-radius: 5px;
  padding: 10px 20px;
  margin-bottom: 20px;
  vertical-align: top;
  border: 1px solid @haze;
  background-color: @clear;

  code {
    font-size: 14px;
    line-height: 16px;
    letter-spacing: 0px;
    padding: 0 !important;
    background-color: transparent;
  }

  ol {
    padding: 0;
    font-size: 14px;
    margin: 0 0 0 40px;

    li {
      margin: 0;
      text-indent: 0;
      color: @darkSkies;
      list-style: decimal;
      background-color: @clear;
    }
  }
}

// Tomorrow Theme (https://github.com/chriskempson/tomorrow-theme)

.pln {
  color: @darkSkies;
}

@media screen {
  // string content
  .str {
    color: @str-color;
  }

  // a keyword
  .kwd {
    color: @kwd-color;
  }

  // a comment
  .com {
    color: @com-color;
  }

  // a type name
  .typ {
    color: @type-color;
  }

  // a literal value
  .lit {
    color: @lit-color;
  }

  // punctuation
  .pun {
    color: @pun-color;
  }

  // lisp open bracket
  .opn {
    color: @opn-color;
  }

  // lisp close bracket
  .clo {
    color: @clo-color;
  }

  // a markup tag name
  .tag {
    color: @tag-color;
  }

  // a markup attribute name
  .atn {
    color: @atn-color;
  }

  // a markup attribute value
  .atv {
    color: @atv-color;
  }

  // a declaration
  .dec {
    color: @dec-color;
  }

  // a variable name
  .var {
    color: @var-color;
  }

  // a function name
  .fun {
    color: @var-color;
  }
}

// increase contrast and text-weight for print/projection
@media print, projection {
  .str {
    color: @str-color-pp;
  }

  .kwd {
    color: @kwd-color-pp;
    font-weight: bold;
  }

  .com {
    color: @com-color-pp;
    font-style: italic;
  }

  .typ {
    color: @typ-color-pp;
    font-weight: bold;
  }

  .lit {
    color: @lit-color-pp;
  }

  .pun, .opn, .clo {
    color: @pun-color-pp;
  }

  .tag {
    color: @tag-color-pp;
    font-weight: bold;
  }

  .atn {
    color: @atn-color-pp;
  }

  .atv {
    color: @atv-color-pp;
  }
}

// specify class=linenums on a pre to get line numbering
ol.linenums {
  margin-top: 0;
  margin-bottom: 0;
}

// ie indents via margin-left
li.l0,
li.l1,
li.l2,
li.l3,
li.l4,
li.l5,
li.l6,
li.l7,
li.l8,
li.l9 {}

// alternate shading for lines
li.l1,
li.l3,
li.l5,
li.l7,
li.l9 {}
